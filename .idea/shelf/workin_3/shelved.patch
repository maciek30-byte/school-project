Index: src/components/PhotoSearch.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/PhotoSearch.tsx b/src/components/PhotoSearch.tsx
new file mode 100644
--- /dev/null	(date 1707395346572)
+++ b/src/components/PhotoSearch.tsx	(date 1707395346572)
@@ -0,0 +1,77 @@
+import React, { useState } from 'react';
+import {
+    Box,
+    TextField,
+    Button,
+    Typography,
+    Radio,
+    RadioGroup,
+    FormControlLabel,
+    FormControl,
+    FormLabel,
+    Grid, Card, CardMedia, CardContent
+} from '@mui/material';
+import {fetchPhotos} from "../services/AppService";
+
+const PhotoSearch: React.FC = () => {
+    const [searchType, setSearchType] = useState('photoId');
+    const [searchValue, setSearchValue] = useState('');
+    const [photos, setPhotos] = useState<any[]>([]); // State to hold an array of photos
+
+    const handleSearch = async () => {
+        let query = searchType === 'photoId' ? `id=${searchValue}` : `albumId=${searchValue}`;
+        const data = await fetchPhotos(query);
+        setPhotos(data);
+    };
+
+    return (
+        <Box sx={{ p: 2 }}>
+            <FormControl component="fieldset">
+                <FormLabel component="legend">Search By</FormLabel>
+                <RadioGroup row aria-label="search-by" name="search-by" value={searchType} onChange={(e) => { setSearchType(e.target.value); setSearchValue(''); }}>
+                    <FormControlLabel value="photoId" control={<Radio />} label="Photo ID" />
+                    <FormControlLabel value="albumId" control={<Radio />} label="Album ID" />
+                </RadioGroup>
+            </FormControl>
+            <TextField
+                label={searchType === 'photoId' ? "Search by Photo ID" : "Search by Album ID"}
+                variant="outlined"
+                value={searchValue}
+                onChange={(e) => setSearchValue(e.target.value)}
+                fullWidth
+                sx={{ mb: 2 }}
+            />
+            <Button onClick={handleSearch} sx={{ mt: 2, mb: 2 }}>Search</Button>
+            <Grid container spacing={2}>
+                {photos.map((photo) => (
+                    <Grid item xs={12} sm={6} md={4} key={photo.id}>
+                        <Card>
+                            <CardMedia
+                                component="img"
+                                height="300"
+                                image={photo.url}
+                                alt={photo.title}
+                            />
+                            <CardContent>
+                                <Typography variant="body2" color="text.secondary">Title: {photo.title}</Typography>
+                                <Typography variant="body2" color="text.secondary">Id: {photo.id}</Typography>
+                                <Typography variant="body2" color="text.secondary">AlbumId: {photo.albumId}</Typography>
+                            </CardContent>
+                        </Card>
+                    </Grid>
+                ))}
+            </Grid>
+            {/*{photos.map((photo, index) => (*/}
+            {/*    <Box key={index} sx={{ mt: 2 }}>*/}
+            {/*        <Typography variant="h6">Photo Details</Typography>*/}
+            {/*        <Typography>Title: {photo.title}</Typography>*/}
+            {/*        <Typography>Id: {photo.id}</Typography>*/}
+            {/*        <Typography>AlbumId: {photo.albumId}</Typography>*/}
+            {/*        <img src={photo.url} alt={photo.title} style={{ maxWidth: '100%', marginBottom: '10px' }} />*/}
+            {/*    </Box>*/}
+            {/*))}*/}
+        </Box>
+    );
+};
+
+export default PhotoSearch;
Index: src/components/UserProfile.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/UserProfile.tsx b/src/components/UserProfile.tsx
new file mode 100644
--- /dev/null	(date 1707395363612)
+++ b/src/components/UserProfile.tsx	(date 1707395363612)
@@ -0,0 +1,117 @@
+import {useUser} from "../context/UserContext";
+import React, {useEffect, useState} from "react";
+import {
+    Avatar,
+    Box,
+    Button,
+    Card,
+    CardContent,
+    Grid,
+    List,
+    ListItem,
+    ListItemAvatar, ListItemText,
+    TextField,
+    Typography
+} from "@mui/material";
+import {User} from "../models/appModels";
+import {fetchUserById} from "../services/AppService";
+import AccountCircleIcon from "@mui/icons-material/AccountCircle";
+
+const UserProfile: React.FC = () => {
+    const {id, username, userInfo, setUserInfo, setUsername } = useUser();
+    const [databaseUser, setDatabaseUser] = useState<User>({} as User);
+    const [editInfo, setEditInfo] = useState({ ...userInfo, username});
+
+    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
+        const { name, value } = e.target;
+        setEditInfo(prevState => ({ ...prevState, [name]: value }));
+    };
+
+
+
+    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
+        e.preventDefault();
+        setUserInfo(editInfo);
+        setUsername(editInfo.username);
+    };
+
+    useEffect(() => {
+        const loadData = async () => {
+            const fetchedUser = await fetchUserById(id);
+            setDatabaseUser(fetchedUser);
+            setUserInfo({email: fetchedUser.email, address: fetchedUser?.website});
+            setEditInfo({email: fetchedUser.email, address: fetchedUser?.website, username});
+
+        };
+        loadData();
+    }, []);
+
+    return (
+        <Box sx={{ flexGrow: 1, m: 4 }}>
+            <Grid container spacing={2}>
+                <Card sx={{ maxWidth: 345, mt: 2 }}>
+                    <CardContent>
+                        <List>
+                            <ListItem>
+                                <ListItemAvatar>
+                                    <Avatar>
+                                        <AccountCircleIcon />
+                                    </Avatar>
+                                </ListItemAvatar>
+                                <ListItemText primary="User Info" secondary={`Name: ${databaseUser.name}`} />
+                            </ListItem>
+                            <ListItem>
+                                <ListItemText primary={`Email: ${userInfo.email}`} />
+                            </ListItem>
+                            <ListItem>
+                                <ListItemText primary={`Username: ${username}`} />
+                            </ListItem>
+                            <ListItem>
+                                <ListItemText primary={`Phone: ${databaseUser.phone}`} />
+                            </ListItem>
+                            <ListItem>
+                                <ListItemText primary={`Website: ${databaseUser.website}`} />
+                            </ListItem>
+                            <ListItem>
+                                <ListItemText primary={`User Id: ${databaseUser.id}`} />
+                            </ListItem>
+                        </List>
+                    </CardContent>
+                </Card>
+                <Grid item xs={12} md={6}>
+                    <Typography variant="h6">Edit Profile</Typography>
+                    <form onSubmit={handleSubmit}>
+                        <TextField
+                            fullWidth
+                            label="Username"
+                            name="username"
+                            value={editInfo.username}
+                            onChange={handleChange}
+                            margin="normal"
+                        />
+                        <TextField
+                            fullWidth
+                            label="Email"
+                            name="email"
+                            value={editInfo.email}
+                            onChange={handleChange}
+                            margin="normal"
+                        />
+                        <TextField
+                            fullWidth
+                            label="Website"
+                            name="address"
+                            value={editInfo.address}
+                            onChange={handleChange}
+                            margin="normal"
+                        />
+                        {/* Add other fields as needed */}
+                        <Button type="submit" variant="contained" sx={{ mt: 2 }}>Save Changes</Button>
+                    </form>
+                </Grid>
+            </Grid>
+        </Box>
+    );
+};
+
+export default UserProfile;
\ No newline at end of file
Index: src/components/UserSearch.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/UserSearch.tsx b/src/components/UserSearch.tsx
new file mode 100644
--- /dev/null	(date 1707395369476)
+++ b/src/components/UserSearch.tsx	(date 1707395369476)
@@ -0,0 +1,89 @@
+import React, { useState } from 'react';
+import {
+    Box,
+    TextField,
+    Button,
+    Typography,
+    CircularProgress,
+    ListItemText,
+    ListItem,
+    List,
+    ListItemAvatar,
+    Avatar,
+    CardContent, Card
+} from '@mui/material';
+import AccountCircleIcon from '@mui/icons-material/AccountCircle';
+import {fetchUsers} from "../services/AppService";
+const UserSearch: React.FC = () => {
+    const [searchTerm, setSearchTerm] = useState('');
+    const [user, setUser] = useState<any>(null);
+    const [loading, setLoading] = useState(false);
+    const [noUserFound, setNoUserFound] = useState(false);
+
+    const handleSearch = async () => {
+        setLoading(true);
+        setNoUserFound(false); // Reset the no user found message before each search
+        const data = await fetchUsers(searchTerm);
+        setLoading(false);
+
+        if (data.length > 0) {
+            setUser(data[0]);
+        } else {
+            setUser(null);
+            setNoUserFound(true); // Set the flag to true if no user is found
+        }
+    };
+
+    return (
+        <Box sx={{ p: 2 }}>
+            <TextField
+                label="Search User by Name"
+                variant="outlined"
+                value={searchTerm}
+                onChange={(e) => setSearchTerm(e.target.value)}
+                fullWidth
+                sx={{ mb: 2 }}
+            />
+            <Box sx={{ display: 'flex', flexDirection: 'column' }}>
+                <Box sx={{ alignSelf: 'flex-start' }}>
+                    <Button onClick={handleSearch} disabled={loading}>Search</Button>
+                </Box>
+                {loading && <CircularProgress size={24} sx={{ mt: 2 }} />}
+            </Box>
+            {!loading && noUserFound && <Typography sx={{ m: 2 }}>No user found.</Typography>}
+            {user && (
+                <Card sx={{ maxWidth: 345, mt: 2 }}>
+                    <CardContent>
+                        <List>
+                            <ListItem>
+                                <ListItemAvatar>
+                                    <Avatar>
+                                        <AccountCircleIcon />
+                                    </Avatar>
+                                </ListItemAvatar>
+                                <ListItemText primary="User Info" secondary={`Name: ${user.name}`} />
+                            </ListItem>
+                            <ListItem>
+                                <ListItemText primary={`Email: ${user.email}`} />
+                            </ListItem>
+                            <ListItem>
+                                <ListItemText primary={`Username: ${user.username}`} />
+                            </ListItem>
+                            <ListItem>
+                                <ListItemText primary={`Phone: ${user.phone}`} />
+                            </ListItem>
+                            <ListItem>
+                                <ListItemText primary={`Website: ${user.website}`} />
+                            </ListItem>
+                            <ListItem>
+                                <ListItemText primary={`User Id: ${user.id}`} />
+                            </ListItem>
+                        </List>
+                    </CardContent>
+                </Card>
+            )}
+        </Box>
+    );
+};
+
+export default UserSearch;
Index: src/context/UserContext.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/context/UserContext.tsx b/src/context/UserContext.tsx
new file mode 100644
--- /dev/null	(date 1707395358176)
+++ b/src/context/UserContext.tsx	(date 1707395358176)
@@ -0,0 +1,34 @@
+import React, { createContext, useContext, useState } from 'react';
+
+interface UserContextType {
+    id: number;
+    password: string;
+    setPassword: React.Dispatch<React.SetStateAction<string>>;
+    username: string;
+    setUsername: React.Dispatch<React.SetStateAction<string>>;
+    userInfo: { email: string; address: string };
+    setUserInfo: React.Dispatch<React.SetStateAction<{ email: string; address: string }>>;
+}
+
+const UserContext = createContext<UserContextType | undefined>(undefined);
+
+export const UserProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
+    const [id] = useState(5);
+    const [username, setUsername] = useState('');
+    const [password, setPassword] = useState('');
+    const [userInfo, setUserInfo] = useState({ email: '', address: '' });
+
+    return (
+        <UserContext.Provider value={{ password, setPassword, username, setUsername, userInfo, setUserInfo, id }}>
+            {children}
+        </UserContext.Provider>
+    );
+};
+
+export const useUser = () => {
+    const context = useContext(UserContext);
+    if (context === undefined) {
+        throw new Error('useUser must be used within a UserProvider');
+    }
+    return context;
+};
Index: src/components/AlbumDetails.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/AlbumDetails.tsx b/src/components/AlbumDetails.tsx
new file mode 100644
--- /dev/null	(date 1707395272848)
+++ b/src/components/AlbumDetails.tsx	(date 1707395272848)
@@ -0,0 +1,44 @@
+import React, {useEffect, useState} from 'react';
+import { Card, CardContent, CardMedia, Grid, Typography} from '@mui/material';
+import {Photo} from "../models/appModels";
+import {fetchPhotos} from "../services/AppService";
+
+interface AlbumDetailsProps {
+    albumId: number;
+}
+
+const AlbumDetail: React.FC<AlbumDetailsProps> = ({albumId}) => {
+    const [photos, setPhotos] = useState<Photo[]>([]);
+
+    useEffect(() => {
+        const loadData = async () => {
+            const fetchedPhotos = await fetchPhotos(`albumId=${albumId}&_limit=25`);
+            setPhotos(fetchedPhotos);
+        };
+        loadData();
+    }, []);
+
+    return (
+        <Grid container spacing={2}>
+            {photos.map((photo) => (
+                <Grid item xs={12} sm={6} md={4} key={photo.id}>
+                    <Card>
+                        <CardMedia
+                            component="img"
+                            height="140"
+                            image={photo.thumbnailUrl}
+                            alt={photo.title}
+                        />
+                        <CardContent>
+                            <Typography variant="body2" color="text.secondary">
+                                {photo.title}
+                            </Typography>
+                        </CardContent>
+                    </Card>
+                </Grid>
+            ))}
+        </Grid>
+    );
+};
+
+export default AlbumDetail;
Index: src/components/Albums.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/Albums.tsx b/src/components/Albums.tsx
new file mode 100644
--- /dev/null	(date 1707395284032)
+++ b/src/components/Albums.tsx	(date 1707395284032)
@@ -0,0 +1,78 @@
+import React, { useEffect, useState } from 'react';
+import {fetchAlbums, fetchUsers} from "../services/AppService";
+import {
+    Accordion, AccordionDetails, AccordionSummary,
+    Box,
+    FormControl,
+    InputLabel,
+    MenuItem,
+    Select,
+    SelectChangeEvent,
+    Typography
+} from '@mui/material';
+
+import {Album, User} from "../models/appModels";
+import {useNavigate} from "react-router-dom";
+import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
+import AlbumDetail from "./AlbumDetails";
+
+const Albums: React.FC = () => {
+    const navigate = useNavigate();
+    const [albums, setAlbums] = useState<Album[]>([]);
+    const [users, setUsers] = useState<User[]>([]);
+    const [selectedUserId, setSelectedUserId] = useState('');
+
+    const handleFilterChange = (event: SelectChangeEvent<string>) => {
+        setSelectedUserId(event.target.value);
+
+    };
+
+    useEffect(() => {
+        const loadData = async () => {
+            const fetchedUsers = await fetchUsers();
+            setUsers(fetchedUsers);
+
+            const fetchedAlbums = await fetchAlbums(Number(selectedUserId));
+            setAlbums(fetchedAlbums);
+        };
+        loadData();
+    }, [selectedUserId]);
+
+    return (
+        <Box sx={{alignItems: 'center',}}>
+            <Box sx={{m: 4}}>
+                <FormControl fullWidth>
+                    <InputLabel id="user-filter-label">Filter by User</InputLabel>
+                    <Select
+                        labelId="user-filter-label"
+                        value={selectedUserId}
+                        label="Filter by User"
+                        onChange={handleFilterChange}
+                    >
+                        <MenuItem value="">
+                            <em>None</em>
+                        </MenuItem>
+                        {users.map((user) => (
+                            <MenuItem key={user.id} value={user.id}>{user.name}</MenuItem>
+                        ))}
+                    </Select>
+                </FormControl>
+            </Box>
+
+            <div>
+                {albums.map((album) => (
+                    <Accordion key={album.id}>
+                        <AccordionSummary expandIcon={<ExpandMoreIcon/>}>
+                            <Typography>Album {album.id}: {album.title}</Typography>
+                        </AccordionSummary>
+                        <AccordionDetails>
+                            <AlbumDetail albumId={album.id}/>
+                        </AccordionDetails>
+                    </Accordion>
+                ))}
+            </div>
+        </Box>
+    );
+};
+
+export default Albums;
Index: src/components/AllPosts.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/AllPosts.tsx b/src/components/AllPosts.tsx
new file mode 100644
--- /dev/null	(date 1707395292012)
+++ b/src/components/AllPosts.tsx	(date 1707395292012)
@@ -0,0 +1,171 @@
+import React, { useEffect, useState } from 'react';
+import {
+    Box,
+    Button,
+    CircularProgress,
+    FormControl,
+    InputLabel,
+    OutlinedInput,
+    TextField,
+    Typography
+} from '@mui/material';
+import {fetchComments, fetchPosts, fetchUserById, fetchUserPosts} from "../services/AppService";
+import {PostWithData} from "../models/appModels";
+import {useUser} from "../context/UserContext";
+
+interface PostsProps {
+    isUserOnly?: boolean;
+}
+
+const AllPosts: React.FC<PostsProps> = ({isUserOnly}) => {
+    const [posts, setPosts] = useState<PostWithData[]>([]);
+    const [newPostTitle, setNewPostTitle] = useState('');
+    const [newPostBody, setNewPostBody] = useState('');
+    const [loading, setLoading] = useState(false); // Add a loading state
+    const { username, id } = useUser();
+
+    useEffect(() => {
+        const fetchData = async () => {
+            setLoading(true); // Start loading
+            const postsData = isUserOnly ? await fetchUserPosts(id) : await fetchPosts();
+
+            // Enhance posts with user and comments
+            const enhancedPosts = await Promise.all(postsData.map(async (post) => {
+                const userData = await fetchUserById(post.userId);
+
+                const commentsData = await fetchComments(post.id);
+
+                return { ...post, user: userData, comments: commentsData };
+            }));
+
+            setPosts(enhancedPosts);
+            setLoading(false); // Finish loading
+        };
+
+        fetchData();
+    }, []);
+
+    const addComment = (postId: number, commentText: string) => {
+        // Simulate adding a comment by updating the post's comments in the local state
+        const updatedPosts = posts.map(post => {
+            if (post.id === postId) {
+                const newComment = {
+                    id: Date.now(), // Simulate a unique ID
+                    postId: postId,
+                    name: username,
+                    body: commentText
+                };
+                return { ...post, comments: [...post.comments, newComment] };
+            }
+            return post;
+        });
+
+        // @ts-ignore
+        setPosts(updatedPosts);
+    };
+
+    const deleteComment = (postId: number, commentId: number) => {
+        const updatedPosts = posts.map(post => {
+            if (post.id === postId) {
+                // Filter out the comment to be deleted
+                const filteredComments = post.comments.filter(comment => comment.id !== commentId);
+                return { ...post, comments: filteredComments };
+            }
+            return post;
+        });
+
+        setPosts(updatedPosts);
+    };
+
+    const handleAddPost = () => {
+        const newPost = {
+            id: Date.now(), // Simulating a unique ID for the new post
+            title: newPostTitle,
+            body: newPostBody,
+            userId: id,
+            user: {
+                id,
+                name: username,
+                username,
+                email: 'superEmail',
+                website: 'superWebsite',
+            },
+            comments: [] // New posts start with no comments
+        };
+        setPosts([newPost, ...posts]); // Add the new post at the beginning of the posts array
+        setNewPostTitle(''); // Reset the title input field
+        setNewPostBody(''); // Reset the body input field
+    };
+
+    if (loading) { // Display the spinner while loading
+        return <CircularProgress style={{ display: 'block', margin: '20px auto' }} />;
+    }
+
+    return (
+        <Box sx={{ p: 2 }}>
+            <Box sx={{ marginBottom: 4 }}>
+                <Typography variant="h5" sx={{ marginBottom: 2 }}>Create a New Post</Typography>
+                <FormControl fullWidth sx={{ marginBottom: 2 }}>
+                    <InputLabel htmlFor="new-post-title">Title</InputLabel>
+                    <OutlinedInput
+                        id="new-post-title"
+                        value={newPostTitle}
+                        onChange={(e) => setNewPostTitle(e.target.value)}
+                        label="Title"
+                    />
+                </FormControl>
+                <FormControl fullWidth sx={{ marginBottom: 2 }}>
+                    <InputLabel htmlFor="new-post-body">Body</InputLabel>
+                    <OutlinedInput
+                        id="new-post-body"
+                        value={newPostBody}
+                        onChange={(e) => setNewPostBody(e.target.value)}
+                        multiline
+                        rows={4}
+                        label="Body"
+                    />
+                </FormControl>
+                <Button variant="contained" onClick={handleAddPost}>Add Post</Button>
+            </Box>
+            {posts.map((post) => (
+                <Box key={post.id} sx={{ p: 4, mb: 4, boxShadow: 3}}>
+                    <Typography variant="h6">{post.title}</Typography>
+                    <Typography variant="subtitle2">
+                        Posted by:
+                        <span style={{color: '#009bd6', fontStyle: 'italic', marginLeft: 5}}>{post.user.name}</span>
+                    </Typography>
+                    <Typography paragraph>{post.body}</Typography>
+                    <Typography>Comments:</Typography>
+                    {post.comments.map((comment) => (
+                        <Box key={comment.id} sx={{ ml: 2, mt: 1, display: 'flex', alignItems: 'center' }}>
+                            <Typography variant="subtitle2" sx={{ flexGrow: 1 }}>
+                                <span style={{color: '#009bd6', fontStyle: 'italic', marginRight: 5}}>{comment.name}</span>
+                                says:</Typography>
+                            <Typography paragraph sx={{ flexGrow: 10 }}>{comment.body}</Typography>
+                            {/* Delete button for comment */}
+                            <Button
+                                onClick={() => deleteComment(post.id, comment.id)}
+                                disabled={comment.name !== username}
+                                sx={{ ml: 1 }}>Delete</Button>
+                        </Box>
+                    ))}
+                    <Box component="form" onSubmit={(e) => {
+                        e.preventDefault();
+                        // @ts-ignore
+                        const formData = new FormData(e.target);
+                        // @ts-ignore
+                        const commentText = formData.get("commentText").toString();
+                        addComment(post.id, commentText);
+                        // @ts-ignore
+                        e.target.reset(); // Reset form after submission
+                    }}>
+                        <TextField name="commentText" label="Your comment" variant="outlined" fullWidth />
+                        <Button type="submit" sx={{ mt: 1 }}>Add Comment</Button>
+                    </Box>
+                </Box>
+            ))}
+        </Box>
+    );
+};
+
+export default AllPosts;
Index: src/components/Photos.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/Photos.tsx b/src/components/Photos.tsx
new file mode 100644
--- /dev/null	(date 1707395341284)
+++ b/src/components/Photos.tsx	(date 1707395341284)
@@ -0,0 +1,43 @@
+import React, { useEffect, useState } from 'react';
+import {fetchUserPhotos} from "../services/AppService";
+import {useUser} from "../context/UserContext";
+import {Card, CardContent, CardMedia, Grid, Typography} from "@mui/material";
+import {Photo} from "../models/appModels";
+
+const Photos: React.FC = () => {
+    const [photos, setPhotos] = useState<Photo[]>([]);
+    const { id } = useUser();
+
+    useEffect(() => {
+        const fetchPhotos = async () => {
+            const data = await fetchUserPhotos(id)
+            setPhotos(data);
+        };
+
+        fetchPhotos();
+    }, []);
+
+    return (
+        <Grid sx={{ m: 4 }} container spacing={2}>
+            {photos.map((photo) => (
+                <Grid item xs={12} sm={6} md={4} key={photo.id}>
+                    <Card>
+                        <CardMedia
+                            component="img"
+                            height="300"
+                            image={photo.url}
+                            alt={photo.title}
+                        />
+                        <CardContent>
+                            <Typography variant="body2" color="text.secondary">Title: {photo.title}</Typography>
+                            <Typography variant="body2" color="text.secondary">Id: {photo.id}</Typography>
+                            <Typography variant="body2" color="text.secondary">AlbumId: {photo.albumId}</Typography>
+                        </CardContent>
+                    </Card>
+                </Grid>
+            ))}
+        </Grid>
+    );
+};
+
+export default Photos;
Index: package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n  \"name\": \"maciek-app\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@testing-library/jest-dom\": \"^5.17.0\",\n    \"@testing-library/react\": \"^13.4.0\",\n    \"@testing-library/user-event\": \"^13.5.0\",\n    \"@types/jest\": \"^27.5.2\",\n    \"@types/node\": \"^16.18.79\",\n    \"@types/react\": \"^18.2.55\",\n    \"@types/react-dom\": \"^18.2.18\",\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\",\n    \"react-scripts\": \"5.0.1\",\n    \"typescript\": \"^4.9.5\",\n    \"web-vitals\": \"^2.1.4\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"eslintConfig\": {\n    \"extends\": [\n      \"react-app\",\n      \"react-app/jest\"\n    ]\n  },\n  \"browserslist\": {\n    \"production\": [\n      \">0.2%\",\n      \"not dead\",\n      \"not op_mini all\"\n    ],\n    \"development\": [\n      \"last 1 chrome version\",\n      \"last 1 firefox version\",\n      \"last 1 safari version\"\n    ]\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/package.json b/package.json
--- a/package.json	(revision d08d84325549192a932daf229dd8cdba984fb071)
+++ b/package.json	(date 1707395334432)
@@ -3,6 +3,10 @@
   "version": "0.1.0",
   "private": true,
   "dependencies": {
+    "@emotion/react": "^11.11.3",
+    "@emotion/styled": "^11.11.0",
+    "@mui/icons-material": "^5.15.8",
+    "@mui/material": "^5.15.7",
     "@testing-library/jest-dom": "^5.17.0",
     "@testing-library/react": "^13.4.0",
     "@testing-library/user-event": "^13.5.0",
@@ -10,8 +14,10 @@
     "@types/node": "^16.18.79",
     "@types/react": "^18.2.55",
     "@types/react-dom": "^18.2.18",
+    "@types/react-router-dom": "^5.3.3",
     "react": "^18.2.0",
     "react-dom": "^18.2.0",
+    "react-router-dom": "^6.22.0",
     "react-scripts": "5.0.1",
     "typescript": "^4.9.5",
     "web-vitals": "^2.1.4"
Index: src/models/appModels.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/models/appModels.ts b/src/models/appModels.ts
new file mode 100644
--- /dev/null	(date 1707395305568)
+++ b/src/models/appModels.ts	(date 1707395305568)
@@ -0,0 +1,66 @@
+interface Address {
+    street: string;
+    suite: string;
+    city: string;
+    zipcode: string;
+    geo: {
+        lat: string;
+        lng: string;
+    };
+}
+
+interface Company {
+    name: string;
+    catchPhrase: string;
+    bs: string;
+}
+
+export interface User {
+    id: number;
+    name: string;
+    username: string;
+    email: string;
+    address?: Address;
+    phone?: string;
+    website: string;
+    company?: Company;
+}
+
+export interface Photo {
+    id: number;
+    albumId: number;
+    title: string;
+    url: string;
+    thumbnailUrl: string;
+    userId: number;
+}
+
+export interface Album {
+    id: number;
+    title: string;
+    userId: number;
+}
+
+export interface Post {
+    body: string;
+    title: string;
+    userId: number;
+    id: number;
+}
+
+export interface Comment {
+    postId: number;
+    body: string;
+    email: string;
+    id: number;
+    name: string;
+}
+
+export interface PostWithData extends Post {
+   comments: Comment[];
+   user: User;
+}
+
+
+
+
Index: src/pages/HomePage/HomePage.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/pages/HomePage/HomePage.tsx b/src/pages/HomePage/HomePage.tsx
new file mode 100644
--- /dev/null	(date 1707395320272)
+++ b/src/pages/HomePage/HomePage.tsx	(date 1707395320272)
@@ -0,0 +1,47 @@
+import React from 'react';
+import {Tabs, Tab, Box, Typography} from '@mui/material';
+import { useState } from 'react';
+import UserProfile from '../../components/UserProfile';
+import Photos from '../../components/Photos';
+import Albums from "../../components/Albums";
+import {useUser} from "../../context/UserContext";
+import UserSearch from "../../components/UserSearch";
+import PhotoSearch from "../../components/PhotoSearch";
+import AllPosts from "../../components/AllPosts";
+
+const HomePage: React.FC = () => {
+    const [value, setValue] = useState(0);
+    const { id, username } = useUser();
+
+    const handleChange = (event: React.SyntheticEvent, newValue: number) => {
+        setValue(newValue);
+    };
+
+    return (
+        <Box sx={{ flexGrow: 1 }}>
+            <Box sx={{ display: 'flex', alignItems: 'center', paddingLeft: 2 }}>
+                <Typography variant="h6" component="div" sx={{ flexGrow: 1 }}>
+                    Welcome { username }
+                </Typography>
+            <Tabs value={value} onChange={handleChange} centered>
+                <Tab label="All Posts" />
+                <Tab label="All Albums" />
+                <Tab label="My Profile" />
+                <Tab label="My Photos" />
+                <Tab label="My Posts" />
+                <Tab label="User Search" />
+                <Tab label="Photo Search" />
+            </Tabs>
+            </Box>
+            {value === 0 && <AllPosts />}
+            {value === 1 && <Albums />}
+            {value === 2 && <UserProfile />}
+            {value === 3 && <Photos />}
+            {value === 4 && <AllPosts isUserOnly={true} />}
+            {value === 5 && <UserSearch />}
+            {value === 6 && <PhotoSearch />}
+        </Box>
+    );
+};
+
+export default HomePage;
Index: src/pages/LoginPage/LoginPage.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/pages/LoginPage/LoginPage.tsx b/src/pages/LoginPage/LoginPage.tsx
new file mode 100644
--- /dev/null	(date 1707395324624)
+++ b/src/pages/LoginPage/LoginPage.tsx	(date 1707395324624)
@@ -0,0 +1,71 @@
+import { useUser } from '../../context/UserContext';
+import React, {useState} from 'react';
+import { useNavigate } from 'react-router-dom';
+import {Button, TextField, Box, Typography} from '@mui/material';
+
+const LoginPage: React.FC = () => {
+    const navigate = useNavigate();
+    const { setUsername, username, password, setPassword } = useUser();
+    const [usernameError, setUsernameError] = useState(false);
+    const [passwordError, setPasswordError] = useState(false);
+
+    const validateForm = () => {
+        let isValid = true;
+        if (!username) {
+            setUsernameError(true);
+            isValid = false;
+        } else {
+            setUsernameError(false);
+        }
+
+        if (!password) {
+            setPasswordError(true);
+            isValid = false;
+        } else {
+            setPasswordError(false);
+        }
+
+        return isValid;
+    };
+
+    const handleLogin = () => {
+        if (validateForm()) {
+            // Proceed with the login logic if the form is valid
+            console.log('Logging in with', username, password);
+            navigate('/home');
+
+        }
+    };
+
+    return (
+        <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', marginTop: '20vh' }}>
+            <Typography variant="h4" component="h1" gutterBottom>
+                Fake Login Page
+            </Typography>
+            <TextField
+                error={usernameError}
+                helperText={usernameError ? "Username is required" : ""}
+                label="Username"
+                variant="outlined"
+                value={username}
+                onChange={(e) => setUsername(e.target.value)}
+                margin="normal"
+            />
+            <TextField
+                error={passwordError}
+                helperText={passwordError ? "Password is required" : ""}
+                label="Password"
+                type="password"
+                variant="outlined"
+                value={password}
+                onChange={(e) => setPassword(e.target.value)}
+                margin="normal"
+            />
+            <Button variant="contained" onClick={handleLogin} sx={{ marginTop: 2 }}>
+                Login
+            </Button>
+        </Box>
+    );
+};
+
+export default LoginPage;
Index: src/services/AppService.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/services/AppService.ts b/src/services/AppService.ts
new file mode 100644
--- /dev/null	(date 1707395312588)
+++ b/src/services/AppService.ts	(date 1707395312588)
@@ -0,0 +1,81 @@
+import {Album, Photo, Post, User, Comment} from "../models/appModels";
+
+const API_BASE_URL = 'https://jsonplaceholder.typicode.com';
+
+export const fetchPhotos = async (query: string): Promise<Photo[]> => {
+    const response = await fetch(`${API_BASE_URL}/photos?${query}`);
+    if (!response.ok) {
+        throw new Error('Failed to fetch photos');
+    }
+    return response.json();
+};
+
+export const fetchUsers = async (name?: string): Promise<User[]> => {
+    let urlParams = ``
+    if(name) {
+        urlParams =`?name=${name}`;
+    }
+    const response = await fetch(`${API_BASE_URL}/users${urlParams}`);
+    if (!response.ok) {
+        throw new Error('Failed to fetch users');
+    }
+    return response.json();
+};
+
+export const fetchUserById = async (id: number): Promise<User> => {
+    const response = await fetch(`${API_BASE_URL}/users?id=${id}`);
+    if (!response.ok) {
+        throw new Error('Failed to fetch users');
+    }
+    const users = await response.json(); // This is expected to be an array
+    if (users.length === 0) {
+        throw new Error('User not found');
+    }
+    return users[0];
+};
+
+export const fetchAlbums = async (userId?: number): Promise<Album[]> => {
+    let urlParams = `?_limit=25`
+    if(userId) {
+        urlParams =`?userId=${userId}&_limit=25`;
+    }
+    const response = await fetch(`${API_BASE_URL}/albums${urlParams}`);
+    if (!response.ok) {
+        throw new Error('Failed to fetch albums');
+    }
+    return response.json();
+};
+
+export const fetchUserPosts = async (userId: number): Promise<Post[]> => {
+    const response = await fetch(`${API_BASE_URL}/posts?userId=${userId}`);
+    if (!response.ok) {
+        throw new Error('Failed to fetch user posts');
+    }
+    return response.json();
+};
+
+export const fetchPosts = async (): Promise<Post[]> => {
+    const response = await fetch(`${API_BASE_URL}/posts`);
+    if (!response.ok) {
+        throw new Error('Failed to fetch all posts');
+    }
+    return response.json();
+};
+
+export const fetchComments = async (postId: number): Promise<Comment[]> => {
+    const response = await fetch(`${API_BASE_URL}/posts/${postId}/comments`);
+    if (!response.ok) {
+        throw new Error('Failed to fetch comments');
+    }
+    return response.json();
+};
+
+export const fetchUserPhotos = async (userId: number): Promise<Photo[]> => {
+    const response = await fetch(`${API_BASE_URL}/photos?userId=${userId}&_limit=25`);
+    if (!response.ok) {
+        throw new Error('Failed to fetch user photos');
+    }
+    return response.json();
+};
+
+
Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Getting Started with Create React App\n\nThis project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).\n\n## Available Scripts\n\nIn the project directory, you can run:\n\n### `npm start`\n\nRuns the app in the development mode.\\\nOpen [http://localhost:3000](http://localhost:3000) to view it in the browser.\n\nThe page will reload if you make edits.\\\nYou will also see any lint errors in the console.\n\n### `npm test`\n\nLaunches the test runner in the interactive watch mode.\\\nSee the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.\n\n### `npm run build`\n\nBuilds the app for production to the `build` folder.\\\nIt correctly bundles React in production mode and optimizes the build for the best performance.\n\nThe build is minified and the filenames include the hashes.\\\nYour app is ready to be deployed!\n\nSee the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.\n\n### `npm run eject`\n\n**Note: this is a one-way operation. Once you `eject`, you can’t go back!**\n\nIf you aren’t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.\n\nInstead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.\n\nYou don’t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.\n\n## Learn More\n\nYou can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).\n\nTo learn React, check out the [React documentation](https://reactjs.org/).\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.md b/README.md
--- a/README.md	(revision d08d84325549192a932daf229dd8cdba984fb071)
+++ b/README.md	(date 1707395352296)
@@ -1,4 +1,8 @@
-# Getting Started with Create React App
+# React App ala 'Facebook'
+Initial assumptions of the application:
+
+1. The logged-in user is the user with id: 5
+2. Limit on requests is set to 25 so as not to overload resources
 
 This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).
 
Index: src/App.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/App.tsx b/src/App.tsx
--- a/src/App.tsx	(revision d08d84325549192a932daf229dd8cdba984fb071)
+++ b/src/App.tsx	(date 1707395298732)
@@ -1,25 +1,20 @@
 import React from 'react';
-import logo from './logo.svg';
-import './App.css';
+import { BrowserRouter as Router, Route, Routes, Navigate } from 'react-router-dom';
+import LoginPage from './pages/LoginPage/LoginPage';
+import HomePage from './pages/HomePage/HomePage';
+import {UserProvider} from "./context/UserContext";
 
 function App() {
   return (
-    <div className="App">
-      <header className="App-header">
-        <img src={logo} className="App-logo" alt="logo" />
-        <p>
-          Edit <code>src/App.tsx</code> and save to reload.
-        </p>
-        <a
-          className="App-link"
-          href="https://reactjs.org"
-          target="_blank"
-          rel="noopener noreferrer"
-        >
-          Learn React
-        </a>
-      </header>
-    </div>
+      <UserProvider>
+          <Router>
+            <Routes>
+              <Route path="/" element={<Navigate to="/login" />} />
+              <Route path="/login" element={<LoginPage />} />
+              <Route path="/home" element={<HomePage />} />
+            </Routes>
+          </Router>
+      </UserProvider>
   );
 }
 
